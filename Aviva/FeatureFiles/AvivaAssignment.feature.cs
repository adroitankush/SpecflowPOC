// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Aviva.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Aviva Assignment")]
    public partial class AvivaAssignmentFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AvivaAssignment.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Aviva Assignment", "\tIn order to showcase programming knowledge\r\n\tAs an Automation Analyst\r\n\tI want t" +
                    "o demonstrate selenium based automation", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
 #line 7
 testRunner.Given("I am on Google Search page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify No of links appearing on Google page with right search")]
        [NUnit.Framework.CategoryAttribute("mytag1")]
        [NUnit.Framework.TestCaseAttribute("Aviva", "20", "1", "Aviva Life Insurance Co Ltd", new string[] {
                "mytag1"}, Category="mytag1")]
        [NUnit.Framework.TestCaseAttribute("Capgemini", "14", "1", "Capgemini: Consulting, Technology, Digital Transformation Services", new string[] {
                "mytag1"}, Category="mytag1")]
        public virtual void VerifyNoOfLinksAppearingOnGooglePageWithRightSearch(string keyword, string noOfLinks, string linkNo, string title, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify No of links appearing on Google page with right search", @__tags);
#line 10
this.ScenarioSetup(scenarioInfo);
#line 6
 this.FeatureBackground();
#line 12
 testRunner.Given(string.Format("I enter search {0}", keyword), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
 testRunner.When("I click on Search Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.Then(string.Format("Search result should contain {0} with {1}", noOfLinks, keyword), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 15
 testRunner.When(string.Format("I click on specfied {0} with {1}", linkNo, keyword), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then(string.Format("I should see page with {0}", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify No of links appearing on Google page with wrong search")]
        [NUnit.Framework.CategoryAttribute("mytag2")]
        [NUnit.Framework.TestCaseAttribute("Aviva", "20", "1", "Aviva Life Insurance Co Ltd", new string[] {
                "mytag2"}, Category="mytag2")]
        [NUnit.Framework.TestCaseAttribute("Capgemini", "14", "1", "Capgemini: Consulting, Technology, Digital Transformation Services", new string[] {
                "mytag2"}, Category="mytag2")]
        public virtual void VerifyNoOfLinksAppearingOnGooglePageWithWrongSearch(string keyword, string noOfLinks, string linkNo, string title, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag2"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify No of links appearing on Google page with wrong search", @__tags);
#line 25
this.ScenarioSetup(scenarioInfo);
#line 6
 this.FeatureBackground();
#line 27
 testRunner.Given(string.Format("I enter search {0}", keyword), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
 testRunner.But("I click on I\'m Feeling Lucky Button instead", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line 29
 testRunner.Then(string.Format("I should not see search result containing {0} with {1}", noOfLinks, keyword), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 30
 testRunner.And(string.Format("I should not be able to click on {0} with {1}", linkNo, keyword), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.Then(string.Format("I should see page with {0}", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
